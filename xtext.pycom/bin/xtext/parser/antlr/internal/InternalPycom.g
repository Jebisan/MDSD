/*
 * generated by Xtext 2.16.0
 */
grammar InternalPycom;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.services.PycomGrammarAccess;

}

@parser::members {

 	private PycomGrammarAccess grammarAccess;

    public InternalPycomParser(TokenStream input, PycomGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "System";
   	}

   	@Override
   	protected PycomGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getLibrariesLibraryParserRuleCall_0_0());
				}
				lv_libraries_0_0=ruleLibrary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"libraries",
						lv_libraries_0_0,
						"xtext.Pycom.Library");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getImportsImportParserRuleCall_1_0());
				}
				lv_imports_1_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"imports",
						lv_imports_1_0,
						"xtext.Pycom.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getBoardsBoardParserRuleCall_2_0());
				}
				lv_boards_2_0=ruleBoard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"boards",
						lv_boards_2_0,
						"xtext.Pycom.Board");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getServersServerParserRuleCall_3_0());
				}
				lv_servers_3_0=ruleServer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					add(
						$current,
						"servers",
						lv_servers_3_0,
						"xtext.Pycom.Server");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	iv_ruleLibrary=ruleLibrary
	{ $current=$iv_ruleLibrary.current; }
	EOF;

// Rule Library
ruleLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Library'
		{
			newLeafNode(otherlv_0, grammarAccess.getLibraryAccess().getLibraryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLibraryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLibraryAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLibraryAccess().getImportsImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLibraryRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"xtext.Pycom.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getLibraryAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getParameterParameterTypeParserRuleCall_3_0());
				}
				lv_parameter_3_0=ruleParameterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					add(
						$current,
						"parameter",
						lv_parameter_3_0,
						"xtext.Pycom.ParameterType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getImportAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportAccess().getParameterParameterTypeParserRuleCall_4_1_0());
					}
					lv_parameter_5_0=ruleParameterType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportRule());
						}
						add(
							$current,
							"parameter",
							lv_parameter_5_0,
							"xtext.Pycom.ParameterType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getImportAccess().getRightParenthesisKeyword_5());
		}
		otherlv_7='from'
		{
			newLeafNode(otherlv_7, grammarAccess.getImportAccess().getFromKeyword_6());
		}
		(
			(
				lv_path_8_0=RULE_STRING
				{
					newLeafNode(lv_path_8_0, grammarAccess.getImportAccess().getPathSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleParameterType
entryRuleParameterType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterTypeRule()); }
	iv_ruleParameterType=ruleParameterType
	{ $current=$iv_ruleParameterType.current; }
	EOF;

// Rule ParameterType
ruleParameterType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_number_0_0=RULE_INT
				{
					newLeafNode(lv_number_0_0, grammarAccess.getParameterTypeAccess().getNumberINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterTypeRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_text_1_0=RULE_STRING
				{
					newLeafNode(lv_text_1_0, grammarAccess.getParameterTypeAccess().getTextSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterTypeRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleServer
entryRuleServer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServerRule()); }
	iv_ruleServer=ruleServer
	{ $current=$iv_ruleServer.current; }
	EOF;

// Rule Server
ruleServer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Server'
		{
			newLeafNode(otherlv_0, grammarAccess.getServerAccess().getServerKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getServerAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getServerAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServerAccess().getConnConnectionParserRuleCall_3_0());
				}
				lv_conn_3_0=ruleConnection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServerRule());
					}
					set(
						$current,
						"conn",
						lv_conn_3_0,
						"xtext.Pycom.Connection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getServerAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getServerAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServerAccess().getExpsConditionalActionParserRuleCall_6_0());
				}
				lv_exps_6_0=ruleConditionalAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServerRule());
					}
					add(
						$current,
						"exps",
						lv_exps_6_0,
						"xtext.Pycom.ConditionalAction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getServerAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	iv_ruleConnection=ruleConnection
	{ $current=$iv_ruleConnection.current; }
	EOF;

// Rule Connection
ruleConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectionAccess().getHostHostParserRuleCall_0_0());
				}
				lv_host_0_0=ruleHost
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectionRule());
					}
					set(
						$current,
						"host",
						lv_host_0_0,
						"xtext.Pycom.Host");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectionAccess().getCommaKeyword_1());
		}
		(
			(
				lv_portnumber_2_0=RULE_INT
				{
					newLeafNode(lv_portnumber_2_0, grammarAccess.getConnectionAccess().getPortnumberINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"portnumber",
						lv_portnumber_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleHost
entryRuleHost returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHostRule()); }
	iv_ruleHost=ruleHost
	{ $current=$iv_ruleHost.current; }
	EOF;

// Rule Host
ruleHost returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHostAccess().getIpAdrIpaddressParserRuleCall_0_0());
				}
				lv_ipAdr_0_0=ruleIpaddress
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHostRule());
					}
					set(
						$current,
						"ipAdr",
						lv_ipAdr_0_0,
						"xtext.Pycom.Ipaddress");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_website_1_0=RULE_STRING
				{
					newLeafNode(lv_website_1_0, grammarAccess.getHostAccess().getWebsiteSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHostRule());
					}
					setWithLastConsumed(
						$current,
						"website",
						lv_website_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleIpaddress
entryRuleIpaddress returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIpaddressRule()); }
	iv_ruleIpaddress=ruleIpaddress
	{ $current=$iv_ruleIpaddress.current.getText(); }
	EOF;

// Rule Ipaddress
ruleIpaddress returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIpaddressAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_2());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIpaddressAccess().getFullStopKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_4());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIpaddressAccess().getFullStopKeyword_5());
		}
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getIpaddressAccess().getINTTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleBoard
entryRuleBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoardRule()); }
	iv_ruleBoard=ruleBoard
	{ $current=$iv_ruleBoard.current; }
	EOF;

// Rule Board
ruleBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Board'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoardAccess().getBoardKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBoardAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoardRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getBoardAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_boardType_3_0=RULE_ID
				{
					newLeafNode(lv_boardType_3_0, grammarAccess.getBoardAccess().getBoardTypeIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoardRule());
					}
					setWithLastConsumed(
						$current,
						"boardType",
						lv_boardType_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getBoardAccess().getCommaKeyword_4());
		}
		(
			(
				lv_communicationRate_5_0=RULE_INT
				{
					newLeafNode(lv_communicationRate_5_0, grammarAccess.getBoardAccess().getCommunicationRateINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoardRule());
					}
					setWithLastConsumed(
						$current,
						"communicationRate",
						lv_communicationRate_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getBoardAccess().getRightParenthesisKeyword_6());
		}
		(
			otherlv_7='uses'
			{
				newLeafNode(otherlv_7, grammarAccess.getBoardAccess().getUsesKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBoardRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getBoardAccess().getLibraryLibraryCrossReference_7_1_0());
					}
				)
			)?
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getBoardAccess().getCommaKeyword_7_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBoardRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getBoardAccess().getLibraryLibraryCrossReference_7_2_1_0());
						}
					)
				)
			)*
		)?
		otherlv_11='{'
		{
			newLeafNode(otherlv_11, grammarAccess.getBoardAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoardAccess().getBoardMembersBoardMemberParserRuleCall_9_0());
				}
				lv_boardMembers_12_0=ruleBoardMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoardRule());
					}
					add(
						$current,
						"boardMembers",
						lv_boardMembers_12_0,
						"xtext.Pycom.BoardMember");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getBoardAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleBoardMember
entryRuleBoardMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoardMemberRule()); }
	iv_ruleBoardMember=ruleBoardMember
	{ $current=$iv_ruleBoardMember.current; }
	EOF;

// Rule BoardMember
ruleBoardMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBoardMemberAccess().getBoardMemberSensorParserRuleCall_0_0());
				}
				lv_boardMember_0_0=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoardMemberRule());
					}
					set(
						$current,
						"boardMember",
						lv_boardMember_0_0,
						"xtext.Pycom.Sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getBoardMemberAccess().getActuatorParserRuleCall_1());
		}
		this_Actuator_1=ruleActuator
		{
			$current = $this_Actuator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoardMemberAccess().getCommunicationParserRuleCall_2());
		}
		this_Communication_2=ruleCommunication
		{
			$current = $this_Communication_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionalAction
entryRuleConditionalAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalActionRule()); }
	iv_ruleConditionalAction=ruleConditionalAction
	{ $current=$iv_ruleConditionalAction.current; }
	EOF;

// Rule ConditionalAction
ruleConditionalAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0='if'
				{
					newLeafNode(lv_type_0_0, grammarAccess.getConditionalActionAccess().getTypeIfKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalActionRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_0, "if");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalActionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalActionAccess().getConditionConditionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalActionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"xtext.Pycom.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionalActionAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalActionAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalActionAccess().getExpMembersExpMemberParserRuleCall_5_0());
				}
				lv_ExpMembers_5_0=ruleExpMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalActionRule());
					}
					add(
						$current,
						"ExpMembers",
						lv_ExpMembers_5_0,
						"xtext.Pycom.ExpMember");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionalActionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleExpMember
entryRuleExpMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpMemberRule()); }
	iv_ruleExpMember=ruleExpMember
	{ $current=$iv_ruleExpMember.current; }
	EOF;

// Rule ExpMember
ruleExpMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpMemberAccess().getFunctionParserRuleCall_0());
		}
		this_Function_0=ruleFunction
		{
			$current = $this_Function_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpMemberAccess().getConditionalActionParserRuleCall_1());
		}
		this_ConditionalAction_1=ruleConditionalAction
		{
			$current = $this_ConditionalAction_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSensorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getTypeNameModuleTypeParserRuleCall_1_0());
				}
				lv_typeName_1_0=ruleModuleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_1_0,
						"xtext.Pycom.ModuleType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getSensorNameModuleNameParserRuleCall_3_0());
				}
				lv_sensorName_3_0=ruleModuleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					set(
						$current,
						"sensorName",
						lv_sensorName_3_0,
						"xtext.Pycom.ModuleName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getSensorAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getPinsPinParserRuleCall_4_1_0());
					}
					lv_pins_5_0=rulePin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						set(
							$current,
							"pins",
							lv_pins_5_0,
							"xtext.Pycom.Pin");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getSensorAccess().getRightParenthesisKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleActuator
entryRuleActuator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActuatorRule()); }
	iv_ruleActuator=ruleActuator
	{ $current=$iv_ruleActuator.current; }
	EOF;

// Rule Actuator
ruleActuator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Actuator'
		{
			newLeafNode(otherlv_0, grammarAccess.getActuatorAccess().getActuatorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActuatorAccess().getTypeNameModuleTypeParserRuleCall_1_0());
				}
				lv_typeName_1_0=ruleModuleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActuatorRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_1_0,
						"xtext.Pycom.ModuleType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getActuatorAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActuatorAccess().getActuatorNameModuleNameParserRuleCall_3_0());
				}
				lv_actuatorName_3_0=ruleModuleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActuatorRule());
					}
					set(
						$current,
						"actuatorName",
						lv_actuatorName_3_0,
						"xtext.Pycom.ModuleName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getActuatorAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActuatorAccess().getPinsPinParserRuleCall_4_1_0());
					}
					lv_pins_5_0=rulePin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActuatorRule());
						}
						set(
							$current,
							"pins",
							lv_pins_5_0,
							"xtext.Pycom.Pin");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getActuatorAccess().getRightParenthesisKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleModuleType
entryRuleModuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleTypeRule()); }
	iv_ruleModuleType=ruleModuleType
	{ $current=$iv_ruleModuleType.current; }
	EOF;

// Rule ModuleType
ruleModuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getModuleTypeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getModuleTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleModuleName
entryRuleModuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleNameRule()); }
	iv_ruleModuleName=ruleModuleName
	{ $current=$iv_ruleModuleName.current; }
	EOF;

// Rule ModuleName
ruleModuleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getModuleNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getModuleNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleCommunication
entryRuleCommunication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommunicationRule()); }
	iv_ruleCommunication=ruleCommunication
	{ $current=$iv_ruleCommunication.current; }
	EOF;

// Rule Communication
ruleCommunication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Communication'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommunicationAccess().getCommunicationKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommunicationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommunicationAccess().getTypeCommunicationTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleCommunicationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommunicationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"xtext.Pycom.CommunicationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommunicationType
entryRuleCommunicationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommunicationTypeRule()); }
	iv_ruleCommunicationType=ruleCommunicationType
	{ $current=$iv_ruleCommunicationType.current; }
	EOF;

// Rule CommunicationType
ruleCommunicationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0='WiFi'
					{
						newLeafNode(lv_name_0_0, grammarAccess.getCommunicationTypeAccess().getNameWiFiKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommunicationTypeRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_0, "WiFi");
					}
				)
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getCommunicationTypeAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					lv_ssid_2_0=RULE_STRING
					{
						newLeafNode(lv_ssid_2_0, grammarAccess.getCommunicationTypeAccess().getSsidSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommunicationTypeRule());
						}
						setWithLastConsumed(
							$current,
							"ssid",
							lv_ssid_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getCommunicationTypeAccess().getCommaKeyword_0_3());
			}
			(
				(
					lv_password_4_0=RULE_STRING
					{
						newLeafNode(lv_password_4_0, grammarAccess.getCommunicationTypeAccess().getPasswordSTRINGTerminalRuleCall_0_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommunicationTypeRule());
						}
						setWithLastConsumed(
							$current,
							"password",
							lv_password_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getCommunicationTypeAccess().getRightParenthesisKeyword_0_5());
			}
		)
		    |
		(
			(
				lv_name_6_0='Bluetooth'
				{
					newLeafNode(lv_name_6_0, grammarAccess.getCommunicationTypeAccess().getNameBluetoothKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommunicationTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_6_0, "Bluetooth");
				}
			)
		)
		    |
		(
			(
				lv_name_7_0='SigFox'
				{
					newLeafNode(lv_name_7_0, grammarAccess.getCommunicationTypeAccess().getNameSigFoxKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommunicationTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_7_0, "SigFox");
				}
			)
		)
	)
;

// Entry rule entryRulePin
entryRulePin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPinRule()); }
	iv_rulePin=rulePin
	{ $current=$iv_rulePin.current; }
	EOF;

// Rule Pin
rulePin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPinAccess().getPowerPinNameParserRuleCall_0_0());
				}
				lv_power_0_0=rulePinName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPinRule());
					}
					set(
						$current,
						"power",
						lv_power_0_0,
						"xtext.Pycom.PinName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getPinAccess().getCommaKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPinAccess().getInputPinNameParserRuleCall_2_0());
				}
				lv_input_2_0=rulePinName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPinRule());
					}
					set(
						$current,
						"input",
						lv_input_2_0,
						"xtext.Pycom.PinName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePinName
entryRulePinName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPinNameRule()); }
	iv_rulePinName=rulePinName
	{ $current=$iv_rulePinName.current; }
	EOF;

// Rule PinName
rulePinName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_STRING
			{
				newLeafNode(lv_name_0_0, grammarAccess.getPinNameAccess().getNameSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPinNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getLogicExLogicExpParserRuleCall_0_0());
				}
				lv_logicEx_0_0=ruleLogicExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"logicEx",
						lv_logicEx_0_0,
						"xtext.Pycom.LogicExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getLogicExLogicExpParserRuleCall_1_0_0());
					}
					lv_logicEx_1_0=ruleLogicExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"logicEx",
							lv_logicEx_1_0,
							"xtext.Pycom.LogicExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_operator_2_0='&&'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getConditionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "&&");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getNestedConditionConditionParserRuleCall_1_2_0());
					}
					lv_nestedCondition_3_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"nestedCondition",
							lv_nestedCondition_3_0,
							"xtext.Pycom.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getLogicExLogicExpParserRuleCall_2_0_0());
					}
					lv_logicEx_4_0=ruleLogicExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"logicEx",
							lv_logicEx_4_0,
							"xtext.Pycom.LogicExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_operator_5_0='||'
					{
						newLeafNode(lv_operator_5_0, grammarAccess.getConditionAccess().getOperatorVerticalLineVerticalLineKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_5_0, "||");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getNestedConditionConditionParserRuleCall_2_2_0());
					}
					lv_nestedCondition_6_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"nestedCondition",
							lv_nestedCondition_6_0,
							"xtext.Pycom.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLogicExp
entryRuleLogicExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicExpRule()); }
	iv_ruleLogicExp=ruleLogicExp
	{ $current=$iv_ruleLogicExp.current; }
	EOF;

// Rule LogicExp
ruleLogicExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicExpAccess().getBoolValBooleanParserRuleCall_0_0());
				}
				lv_boolVal_0_0=ruleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicExpRule());
					}
					set(
						$current,
						"boolVal",
						lv_boolVal_0_0,
						"xtext.Pycom.Boolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicExpAccess().getCompExpComparisonExpParserRuleCall_1_0());
				}
				lv_compExp_1_0=ruleComparisonExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicExpRule());
					}
					set(
						$current,
						"compExp",
						lv_compExp_1_0,
						"xtext.Pycom.ComparisonExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current; }
	EOF;

// Rule Boolean
ruleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='true'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleanAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_value_1_0='false'
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanRule());
					}
					setWithLastConsumed($current, "value", lv_value_1_0, "false");
				}
			)
		)
	)
;

// Entry rule entryRuleComparisonExp
entryRuleComparisonExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpRule()); }
	iv_ruleComparisonExp=ruleComparisonExp
	{ $current=$iv_ruleComparisonExp.current; }
	EOF;

// Rule ComparisonExp
ruleComparisonExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpAccess().getLeftExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"xtext.Pycom.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpAccess().getOpOperatorParserRuleCall_1_0());
				}
				lv_op_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"xtext.Pycom.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpAccess().getRightExpressionParserRuleCall_2_0());
				}
				lv_right_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"xtext.Pycom.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_outputValue_0_0=RULE_INT
				{
					newLeafNode(lv_outputValue_0_0, grammarAccess.getExpressionAccess().getOutputValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"outputValue",
						lv_outputValue_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getOutputfunctionFunctionParserRuleCall_1_0());
				}
				lv_outputfunction_1_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"outputfunction",
						lv_outputfunction_1_0,
						"xtext.Pycom.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignKeyword_0());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_1());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getBoardBoardCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getFunctionNameImportCrossReference_2_0());
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getPinsPinParserRuleCall_4_0());
				}
				lv_pins_4_0=rulePin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"pins",
						lv_pins_4_0,
						"xtext.Pycom.Pin");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
