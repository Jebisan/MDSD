/**
 * generated by Xtext 2.16.0
 */
package xtext.pycom.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.pycom.Actuator;
import xtext.pycom.ModuleName;
import xtext.pycom.ModuleType;
import xtext.pycom.Pin;
import xtext.pycom.PycomPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Actuator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.pycom.impl.ActuatorImpl#getTypeName <em>Type Name</em>}</li>
 *   <li>{@link xtext.pycom.impl.ActuatorImpl#getActuatorName <em>Actuator Name</em>}</li>
 *   <li>{@link xtext.pycom.impl.ActuatorImpl#getPins <em>Pins</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActuatorImpl extends BoardMemberImpl implements Actuator
{
  /**
   * The cached value of the '{@link #getTypeName() <em>Type Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeName()
   * @generated
   * @ordered
   */
  protected ModuleType typeName;

  /**
   * The cached value of the '{@link #getActuatorName() <em>Actuator Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActuatorName()
   * @generated
   * @ordered
   */
  protected ModuleName actuatorName;

  /**
   * The cached value of the '{@link #getPins() <em>Pins</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPins()
   * @generated
   * @ordered
   */
  protected Pin pins;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActuatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PycomPackage.Literals.ACTUATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleType getTypeName()
  {
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeName(ModuleType newTypeName, NotificationChain msgs)
  {
    ModuleType oldTypeName = typeName;
    typeName = newTypeName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PycomPackage.ACTUATOR__TYPE_NAME, oldTypeName, newTypeName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeName(ModuleType newTypeName)
  {
    if (newTypeName != typeName)
    {
      NotificationChain msgs = null;
      if (typeName != null)
        msgs = ((InternalEObject)typeName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PycomPackage.ACTUATOR__TYPE_NAME, null, msgs);
      if (newTypeName != null)
        msgs = ((InternalEObject)newTypeName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PycomPackage.ACTUATOR__TYPE_NAME, null, msgs);
      msgs = basicSetTypeName(newTypeName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.ACTUATOR__TYPE_NAME, newTypeName, newTypeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleName getActuatorName()
  {
    return actuatorName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActuatorName(ModuleName newActuatorName, NotificationChain msgs)
  {
    ModuleName oldActuatorName = actuatorName;
    actuatorName = newActuatorName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PycomPackage.ACTUATOR__ACTUATOR_NAME, oldActuatorName, newActuatorName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActuatorName(ModuleName newActuatorName)
  {
    if (newActuatorName != actuatorName)
    {
      NotificationChain msgs = null;
      if (actuatorName != null)
        msgs = ((InternalEObject)actuatorName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PycomPackage.ACTUATOR__ACTUATOR_NAME, null, msgs);
      if (newActuatorName != null)
        msgs = ((InternalEObject)newActuatorName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PycomPackage.ACTUATOR__ACTUATOR_NAME, null, msgs);
      msgs = basicSetActuatorName(newActuatorName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.ACTUATOR__ACTUATOR_NAME, newActuatorName, newActuatorName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pin getPins()
  {
    return pins;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPins(Pin newPins, NotificationChain msgs)
  {
    Pin oldPins = pins;
    pins = newPins;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PycomPackage.ACTUATOR__PINS, oldPins, newPins);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPins(Pin newPins)
  {
    if (newPins != pins)
    {
      NotificationChain msgs = null;
      if (pins != null)
        msgs = ((InternalEObject)pins).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PycomPackage.ACTUATOR__PINS, null, msgs);
      if (newPins != null)
        msgs = ((InternalEObject)newPins).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PycomPackage.ACTUATOR__PINS, null, msgs);
      msgs = basicSetPins(newPins, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.ACTUATOR__PINS, newPins, newPins));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR__TYPE_NAME:
        return basicSetTypeName(null, msgs);
      case PycomPackage.ACTUATOR__ACTUATOR_NAME:
        return basicSetActuatorName(null, msgs);
      case PycomPackage.ACTUATOR__PINS:
        return basicSetPins(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR__TYPE_NAME:
        return getTypeName();
      case PycomPackage.ACTUATOR__ACTUATOR_NAME:
        return getActuatorName();
      case PycomPackage.ACTUATOR__PINS:
        return getPins();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR__TYPE_NAME:
        setTypeName((ModuleType)newValue);
        return;
      case PycomPackage.ACTUATOR__ACTUATOR_NAME:
        setActuatorName((ModuleName)newValue);
        return;
      case PycomPackage.ACTUATOR__PINS:
        setPins((Pin)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR__TYPE_NAME:
        setTypeName((ModuleType)null);
        return;
      case PycomPackage.ACTUATOR__ACTUATOR_NAME:
        setActuatorName((ModuleName)null);
        return;
      case PycomPackage.ACTUATOR__PINS:
        setPins((Pin)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.ACTUATOR__TYPE_NAME:
        return typeName != null;
      case PycomPackage.ACTUATOR__ACTUATOR_NAME:
        return actuatorName != null;
      case PycomPackage.ACTUATOR__PINS:
        return pins != null;
    }
    return super.eIsSet(featureID);
  }

} //ActuatorImpl
