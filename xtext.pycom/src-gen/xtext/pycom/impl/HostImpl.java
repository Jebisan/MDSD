/**
 * generated by Xtext 2.16.0
 */
package xtext.pycom.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.pycom.Host;
import xtext.pycom.PycomPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Host</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.pycom.impl.HostImpl#getIpAdr <em>Ip Adr</em>}</li>
 *   <li>{@link xtext.pycom.impl.HostImpl#getWebsite <em>Website</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HostImpl extends MinimalEObjectImpl.Container implements Host
{
  /**
   * The default value of the '{@link #getIpAdr() <em>Ip Adr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIpAdr()
   * @generated
   * @ordered
   */
  protected static final String IP_ADR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIpAdr() <em>Ip Adr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIpAdr()
   * @generated
   * @ordered
   */
  protected String ipAdr = IP_ADR_EDEFAULT;

  /**
   * The default value of the '{@link #getWebsite() <em>Website</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWebsite()
   * @generated
   * @ordered
   */
  protected static final String WEBSITE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWebsite() <em>Website</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWebsite()
   * @generated
   * @ordered
   */
  protected String website = WEBSITE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HostImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PycomPackage.Literals.HOST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIpAdr()
  {
    return ipAdr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIpAdr(String newIpAdr)
  {
    String oldIpAdr = ipAdr;
    ipAdr = newIpAdr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.HOST__IP_ADR, oldIpAdr, ipAdr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWebsite()
  {
    return website;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWebsite(String newWebsite)
  {
    String oldWebsite = website;
    website = newWebsite;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PycomPackage.HOST__WEBSITE, oldWebsite, website));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PycomPackage.HOST__IP_ADR:
        return getIpAdr();
      case PycomPackage.HOST__WEBSITE:
        return getWebsite();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PycomPackage.HOST__IP_ADR:
        setIpAdr((String)newValue);
        return;
      case PycomPackage.HOST__WEBSITE:
        setWebsite((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.HOST__IP_ADR:
        setIpAdr(IP_ADR_EDEFAULT);
        return;
      case PycomPackage.HOST__WEBSITE:
        setWebsite(WEBSITE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PycomPackage.HOST__IP_ADR:
        return IP_ADR_EDEFAULT == null ? ipAdr != null : !IP_ADR_EDEFAULT.equals(ipAdr);
      case PycomPackage.HOST__WEBSITE:
        return WEBSITE_EDEFAULT == null ? website != null : !WEBSITE_EDEFAULT.equals(website);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ipAdr: ");
    result.append(ipAdr);
    result.append(", website: ");
    result.append(website);
    result.append(')');
    return result.toString();
  }

} //HostImpl
