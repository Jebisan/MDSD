/*
 * generated by Xtext 2.16.0
 */
package xtext.validation

import xtext.pycom.Connection
import xtext.pycom.PycomPackage
import org.eclipse.xtext.validation.Check
import xtext.pycom.Board
import xtext.pycom.Host
import xtext.pycom.System
import xtext.pycom.Sensor

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PycomValidator extends AbstractPycomValidator {
	
	public static val INVALID_NAME = 'invalidName'
	public static val INVALID_TYPENAME = 'invalidTypeName'
	public static val INVALID_PORTNUMBER = 'invalidPortnumber'
	public static val INVALID_RATE = 'InvalidCommunicationRate'
	
	@Check
	def checkSensorTypeIsUpperCase(Sensor sensor) {
		if (!Character.isUpperCase(sensor.typeName.name.charAt(0))) {
			warning('Sensor type names should be uppercase!', PycomPackage.Literals.SENSOR__TYPE_NAME, INVALID_TYPENAME)
		}
	}
 
	@Check
	def checkSensorNameIsLowerCase(Sensor sensor) {
		if (!Character.isLowerCase(sensor.sensorName.name.charAt(0))) {
			warning('Sensor names should be lowercase!', PycomPackage.Literals.SENSOR__SENSOR_NAME, INVALID_NAME)	
		}
	}
 
	@Check
	def checkIfthereAreBoards(System system) {
		if (system.boards.length<=0) {
			error('There should be at least one board in the program', PycomPackage.Literals.SYSTEM__BOARDS, 'No boards found')		
		}
	}
	
	@Check
	def checkIfthereAreServers(System system) {
		if (system.servers.length<=0) {
			error('There should be at least one server in the program', PycomPackage.Literals.SYSTEM__SERVERS, 'No server found')		
		}
	}

	@Check
	def portnumberWithinRange(Connection con) {
		if (con.getPortnumber() <= 1024 || con.getPortnumber()  >= 65535) {
			error('Port number should be between 1024 and 65535', PycomPackage.Literals.CONNECTION__PORTNUMBER, INVALID_PORTNUMBER)		
		}
	}
	
	@Check
	def websiteIsValid(Host host) {
		if(!host.website.isNullOrEmpty){
		if (!host.website.startsWith('http://')){
			if(!host.website.startsWith('https://')){
			error('Not a valid HTTP server. Should be either HTTP or HTTPS', PycomPackage.Literals.HOST__WEBSITE, 'invalid web address')	
			}
		} 
		}
	}
	

	@Check
	def rateIsLargerThan0(Board board) {
		if (board.communicationRate < 1) {
			error('The rate should be larger than 0!', PycomPackage.Literals.BOARD__COMMUNICATION_RATE, INVALID_RATE)	
		}
	}		
		
}