/*
 * generated by Xtext 2.16.0
 */
package xtext.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import xtext.validation.PycomValidator
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.Fix

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class PycomQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(PycomValidator.INVALID_TYPENAME)
	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
		]
	}
	
	@Fix(PycomValidator.INVALID_NAME)
	def uncapitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Uncapitalize name', 'Uncapitalize the name.', 'lowcase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter.toLowerCase)
		]
	}
	
	@Fix(PycomValidator.INVALID_PORTNUMBER)
	def validPortnumber(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Use port 5000', 'Use port 5000.', '') [
			context |
			context.xtextDocument.replace(issue.offset, issue.length, '5000')
		]
	}
	
	
	@Fix(PycomValidator.INVALID_RATE)
	def validRate(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Set rate to every second', 'The rate should be larger than 0 seconds.', '') [
			context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset, 1, '1')
		]
		acceptor.accept(issue, 'Set rate to every minute', 'The rate should be larger than 0 seconds.', '') [
			context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset, 1, '60')
		]
		acceptor.accept(issue, 'Set rate to every hour', 'The rate should be larger than 0 seconds.', '') [
			context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset, 1, '3600')
		]	
	}	

}
